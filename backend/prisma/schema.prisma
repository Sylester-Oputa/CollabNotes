// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  HEAD_OF_DEPARTMENT
  USER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum MessageType {
  TEXT
  FILE
  IMAGE
  VOICE
}

enum MessageStatus {
  SENT
  DELIVERED
  READ
  DELETED
}

model Company {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  departments   Department[]
  users         User[]
  activityLogs  ActivityLog[]
  messages      Message[]
  messageGroups MessageGroup[]

  @@map("companies")
}

model Department {
  id        String   @id @default(cuid())
  name      String
  slug      String
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  users   User[]
  notes   Note[]
  tasks   Task[]

  @@unique([slug, companyId])
  @@unique([name, companyId])
  @@map("departments")
}

model User {
  id             String    @id @default(cuid())
  name           String
  email          String    @unique
  passwordHash   String
  role           UserRole  @default(USER)
  departmentRole String? // Custom role within department (e.g., "Senior Developer", "Project Manager", etc.)
  companyId      String
  departmentId   String?
  lastSeen       DateTime?
  isTyping       Boolean   @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  company              Company              @relation(fields: [companyId], references: [id], onDelete: Cascade)
  department           Department?          @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  createdNotes         Note[]               @relation("NoteCreator")
  assignedTasks        Task[]               @relation("TaskAssignee")
  createdTasks         Task[]               @relation("TaskCreator")
  activityLogs         ActivityLog[]
  sentMessages         Message[]            @relation("MessageSender")
  receivedMessages     Message[]            @relation("MessageRecipient")
  messageReactions     MessageReaction[]
  groupMemberships     GroupMembership[]
  createdGroups        MessageGroup[]       @relation("GroupCreator")
  notificationSettings NotificationSetting?
  notifications        Notification[]

  @@map("users")
}

model Note {
  id           String   @id @default(cuid())
  title        String
  content      String   @default("")
  departmentId String
  createdBy    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  creator    User       @relation("NoteCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("notes")
}

model Task {
  id           String     @id @default(cuid())
  title        String
  description  String?
  status       TaskStatus @default(TODO)
  departmentId String
  assignedTo   String?
  createdBy    String
  dueDate      DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  assignee   User?      @relation("TaskAssignee", fields: [assignedTo], references: [id], onDelete: SetNull)
  creator    User       @relation("TaskCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model ActivityLog {
  id        String   @id @default(cuid())
  action    String
  metadata  Json?
  userId    String
  companyId String
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("activity_logs")
}

model Message {
  id          String        @id @default(cuid())
  content     String
  type        MessageType   @default(TEXT)
  status      MessageStatus @default(SENT)
  senderId    String
  recipientId String? // null for group messages
  groupId     String? // null for direct messages
  companyId   String
  parentId    String? // for replies/threading
  editedAt    DateTime?
  deletedAt   DateTime?
  deliveredAt DateTime?
  readAt      DateTime?
  createdAt   DateTime      @default(now())

  // Relations
  sender      User                @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  recipient   User?               @relation("MessageRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
  group       MessageGroup?       @relation(fields: [groupId], references: [id], onDelete: Cascade)
  company     Company             @relation(fields: [companyId], references: [id], onDelete: Cascade)
  parent      Message?            @relation("MessageReplies", fields: [parentId], references: [id], onDelete: SetNull)
  replies     Message[]           @relation("MessageReplies")
  attachments MessageAttachment[]
  reactions   MessageReaction[]

  @@index([companyId, createdAt])
  @@index([groupId, createdAt])
  @@index([recipientId, senderId])
  @@map("messages")
}

model MessageAttachment {
  id        String   @id @default(cuid())
  messageId String
  fileName  String
  fileUrl   String
  fileSize  Int
  mimeType  String
  createdAt DateTime @default(now())

  // Relations
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("message_attachments")
}

model MessageReaction {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  emoji     String
  createdAt DateTime @default(now())

  // Relations
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])
  @@map("message_reactions")
}

model MessageGroup {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String   @default("DEPARTMENT") // DEPARTMENT, PROJECT, CUSTOM
  companyId   String
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  company  Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  creator  User              @relation("GroupCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  members  GroupMembership[]
  messages Message[]

  @@map("message_groups")
}

model GroupMembership {
  id       String   @id @default(cuid())
  groupId  String
  userId   String
  role     String   @default("MEMBER") // ADMIN, MEMBER
  joinedAt DateTime @default(now())

  // Relations
  group MessageGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@map("group_memberships")
}

model NotificationSetting {
  id                    String   @id @default(cuid())
  userId                String   @unique
  emailNotifications    Boolean  @default(true)
  desktopNotifications  Boolean  @default(true)
  messageNotifications  Boolean  @default(true)
  groupNotifications    Boolean  @default(true)
  reactionNotifications Boolean  @default(true)
  mentionNotifications  Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("notification_settings")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String   @default("info") // info, success, warning, error
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("notifications")
}
