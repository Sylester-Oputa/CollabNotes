// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  HEAD_OF_DEPARTMENT
  USER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

model Company {
  id        String   @id @default(cuid())
  name      String   @unique
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  departments  Department[]
  users        User[]
  activityLogs ActivityLog[]

  @@map("companies")
}

model Department {
  id        String   @id @default(cuid())
  name      String
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  users   User[]
  notes   Note[]
  tasks   Task[]

  @@unique([name, companyId])
  @@map("departments")
}

model User {
  id             String   @id @default(cuid())
  name           String
  email          String   @unique
  passwordHash   String
  role           UserRole @default(USER)
  departmentRole String? // Custom role within department (e.g., "Senior Developer", "Project Manager", etc.)
  companyId      String
  departmentId   String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  company       Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  department    Department?   @relation(fields: [departmentId], references: [id], onDelete: SetNull)
  createdNotes  Note[]        @relation("NoteCreator")
  assignedTasks Task[]        @relation("TaskAssignee")
  createdTasks  Task[]        @relation("TaskCreator")
  activityLogs  ActivityLog[]

  @@map("users")
}

model Note {
  id           String   @id @default(cuid())
  title        String
  content      String   @default("")
  departmentId String
  createdBy    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  creator    User       @relation("NoteCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("notes")
}

model Task {
  id           String     @id @default(cuid())
  title        String
  description  String?
  status       TaskStatus @default(TODO)
  departmentId String
  assignedTo   String?
  createdBy    String
  dueDate      DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  department Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  assignee   User?      @relation("TaskAssignee", fields: [assignedTo], references: [id], onDelete: SetNull)
  creator    User       @relation("TaskCreator", fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model ActivityLog {
  id        String   @id @default(cuid())
  action    String
  metadata  Json?
  userId    String
  companyId String
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map("activity_logs")
}
